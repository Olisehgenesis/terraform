# Azure Pipeline that run basic continuous integration on a Terraform project

# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - naftest
  paths:
    include:
    - /naftest

resources:
  repositories:
    - repository: modules
      type: git
      name: "modules"

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection1: 'TerraformSC'
  #serviceconnection2: 'TS-Terraform-Test-SP'
  azureLocation: 'us-west-3'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)'
  terraformVersion: $(latest)
  PAT_TOKEN: 'ka4mgn3yyaio3teghpngqlhcfnxupih5aiorgnd2f4dzbmcnramq'

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        vmImage: ubuntu-20.04
      steps:
      - checkout: modules
      # Step 1: install Checkov Static Code Analysis
    # Install Checkov
      - bash: sudo apt install python3-testresources
      #- bash: pip3 install checkov
      #  displayName: 'Install checkov'
      #  name: 'install_checkov'

   #step 2 upgrade pip
      - bash: python3 -m pip install --upgrade pip

    #step 2 authenticate to modules
      - script: git config --global url."https://$(PAT_TOKEN)@dev.azure.com/".insteadOf "https://dev.azure.com/"
        displayName: 'Authenticate with PAT'
        env: 
          PAT_TOKEN: $(PatToken)

    # Step 3: run Terraform init to initialize the workspace
      - task: TerraformCLI@0
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection1)
          terraformVersion: $(latest)
          
          

    # Step 4: run Terraform validate to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform validate'
        inputs:
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection1)
          terraformVersion: $(latest)
          
          

    # step 5 Verify module files with Checkov
      - bash: checkov --directory $(System.DefaultWorkingDirectory)
        displayName: 'Verify modules with Checkov'
        name: 'checkov_module_check'
    
    # Step 7: run Terraform plan to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform plan'
        inputs:
          command: plan
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection1)
          terraformVersion: $(latest)
          

    # Step 8: run Terraform apply to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform apply'
        inputs:
          command: apply
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection1)
          terraformVersion: $(latest)
          